import kotlin.test.*
import kotlinx.datetime.Clock
import kotlinx.datetime.DateTimePeriod
import kotlinx.datetime.TimeZone
import kotlinx.datetime.plus
import kotlinx.datetime.minus
import kotlinx.datetime.toLocalDateTime

class CacheExpiryHandlerImplTest {

    @Test
    fun testDataStorage_whenDataIsStored_dataIsRetrievable() {
        val handler = CacheExpiryHandlerImpl<String>()
        
        handler.store("testData")
        
        assertTrue(handler.hasData(), "Handler should have data")
        assertFalse(handler.isExpired(), "Data should not be expired")
        assertEquals("testData", handler.getData(), "Should be able to retrieve stored data")
    }

    @Test
    fun testExpiry_whenDataIsNotExpired_dataIsRetrievable() {
        val handler = CacheExpiryHandlerImpl<String>()
        
        val now = Clock.System.now()
        val futureTime = now.plus(DateTimePeriod(hours = 1))
        
        handler.store("testData", futureTime.toLocalDateTime(TimeZone.UTC))
        
        assertFalse(handler.isExpired(), "Data should not be expired")
        assertEquals("testData", handler.getData(), "Should be able to retrieve non
